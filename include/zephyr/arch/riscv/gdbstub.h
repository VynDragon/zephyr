/*
 * Copyright (c) 2024 MASSDRIVER EI (massdriver.space)
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef ZEPHYR_INCLUDE_ARCH_RISCV_GDBSTUB_H_
#define ZEPHYR_INCLUDE_ARCH_RISCV_GDBSTUB_H_


#ifndef _ASMLANGUAGE

/* best effort attempt to determine CSR size (misa is runtime) */
#if defined(CONFIG_64BIT)
#define RISCV_TDATA1_TYPE_MASK		0xF000000000000000
#define RISCV_TDATA1_TYPE_SHIFT		60
#define RISCV_TDATA1_DMODE_MASK		0x0800000000000000
#define RISCV_TDATA1_DMODE_SHIFT	59
#define RISCV_TDATA1_DATA_MASK		0x07FFFFFFFFFFFFFF
#elif defined(CONFIG_RISCV_ISA_RV128I)
#define RISCV_TDATA1_TYPE_MASK		0xF0000000000000000000000000000000
#define RISCV_TDATA1_TYPE_SHIFT		124
#define RISCV_TDATA1_DMODE_MASK		0x08000000000000000000000000000000
#define RISCV_TDATA1_DMODE_SHIFT	123
#define RISCV_TDATA1_DATA_MASK		0x07FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
#else
#define RISCV_TDATA1_TYPE_MASK		0xF0000000
#define RISCV_TDATA1_TYPE_SHIFT		28
#define RISCV_TDATA1_DMODE_MASK		0x08000000
#define RISCV_TDATA1_DMODE_SHIFT	27
#define RISCV_TDATA1_DATA_MASK		0x07FFFFFF
#endif

#define RISCV_TINFO_VERSION_MASK	0xFF000000
#define RISCV_TINFO_VERSION_SHIFT	24
#define RISCV_TINFO_INFO_MASK		0xFFFF
#define RISCV_TINFO_INFO_SHIFT		0

#define RISCV_TDATA1_ACTION_MASK	0x3F
#define RISCV_TDATA1_ACTION_SHIFT	0

#define RISCV_TDATA1_ACTION_EBREAK	0
#define RISCV_TDATA1_ACTION_ENTER_DM	1
#define RISCV_TDATA1_ACTION_TRACEON	2
#define RISCV_TDATA1_ACTION_TRACEOFF	3
#define RISCV_TDATA1_ACTION_TRACENOTIFY	4
#define RISCV_TDATA1_ACTION_EXT1	8
#define RISCV_TDATA1_ACTION_EXT2	9

#define RISCV_TDATA1_TYPE_DISABLED	15

#define RISCV_TDATA1_TYPE_ICOUNT	3
#define RISCV_TINFO_STYPE_ICOUNT_MASK	(1 << RISCV_TDATA1_TYPE_ICOUNT)
#define RISCV_TDATA1_ICOUNT_COUNT_MASK	0xFFFC00
#define RISCV_TDATA1_ICOUNT_COUNT_SHIFT	10
#define RISCV_TDATA1_ICOUNT_M_MASK	0x200
#define RISCV_TDATA1_ICOUNT_M_SHIFT	9
#define RISCV_TDATA1_ICOUNT_S_MASK	0x80
#define RISCV_TDATA1_ICOUNT_S_SHIFT	7
#define RISCV_TDATA1_ICOUNT_U_MASK	0x70
#define RISCV_TDATA1_ICOUNT_U_SHIFT	6


#define RISCV_TDATA1_TYPE_MCONTROL		2
#define RISCV_TINFO_STYPE_MCONTROL_MASK		(1 << RISCV_TDATA1_TYPE_MCONTROL)
#define RISCV_TDATA1_MCONTROL_LOAD_MASK		0x1
#define RISCV_TDATA1_MCONTROL_LOAD_SHIFT	0
#define RISCV_TDATA1_MCONTROL_STORE_MASK	0x2
#define RISCV_TDATA1_MCONTROL_STORE_SHIFT	1
#define RISCV_TDATA1_MCONTROL_EXECUTE_MASK	0x4
#define RISCV_TDATA1_MCONTROL_EXECUTE_SHIFT	2
#define RISCV_TDATA1_MCONTROL_U_MASK		0x8
#define RISCV_TDATA1_MCONTROL_U_SHIFT		3
#define RISCV_TDATA1_MCONTROL_S_MASK		0x10
#define RISCV_TDATA1_MCONTROL_S_SHIFT		4
#define RISCV_TDATA1_MCONTROL_M_MASK		0x40
#define RISCV_TDATA1_MCONTROL_M_SHIFT		6
#define RISCV_TDATA1_MCONTROL_MSU_MASK		(0x8 | 0x10 | 0x40)
#define RISCV_TDATA1_MCONTROL_MATCH_MASK	0x780
#define RISCV_TDATA1_MCONTROL_MATCH_SHIFT	7
#define RISCV_TDATA1_MCONTROL_CHAIN_MASK	0x800
#define RISCV_TDATA1_MCONTROL_CHAIN_SHIFT	11
#define RISCV_TDATA1_MCONTROL_ACTION_MASK	0xF000
#define RISCV_TDATA1_MCONTROL_ACTION_SHIFT	12
#define RISCV_TDATA1_MCONTROL_SIZELO_MASK	0x30000
#define RISCV_TDATA1_MCONTROL_SIZELO_SHIFT	16
#define RISCV_TDATA1_MCONTROL_TIMING_MASK	0x40000
#define RISCV_TDATA1_MCONTROL_TIMING_SHIFT	18
#define RISCV_TDATA1_MCONTROL_SELECT_MASK	0x80000
#define RISCV_TDATA1_MCONTROL_SELECT_SHIFT	19
#define RISCV_TDATA1_MCONTROL_HIT_MASK		0x100000
#define RISCV_TDATA1_MCONTROL_HIT_SHIFT		20
#define RISCV_TDATA1_MCONTROL_SIZEHI_MASK	0x600000
#define RISCV_TDATA1_MCONTROL_SIZEHI_SHIFT	21

enum GDB_REGISTER {
	RA = 0,
	T0,
	T1,
	T2,
#if !defined(CONFIG_RISCV_ISA_RV32E)
	T3,
	T4,
	T5,
	T6,
#endif
	A0,
	A1,
	A2,
	A3,
	A4,
	A5,
#if !defined(CONFIG_RISCV_ISA_RV32E)
	A6,
	A7,
#endif
	MEPC,
	S0,
#ifdef CONFIG_USERSPACE
	SP,
#endif
	GDB_NUM_REGS,
	MSTATUS,
};

/* in gdb PC (MEPC) is number 32,
 * encoding is 2 character per byte
 * we need XLENbytes * 2 * 33 bytes
 */
#define GDB_READALL_PACKET_SIZE (sizeof(unsigned long) * 2 * 33)

/* required structure */
struct gdb_ctx {
	/* cause of the exception */
	unsigned long exception;
	unsigned long registers[GDB_NUM_REGS];
};

struct riscv_trigger {
	bool		supported;
	uint8_t		version;
	uint16_t	supported_types;
	uint16_t	type;
	bool		debug_only;
	unsigned long	data;
};

typedef struct riscv_trigger riscv_trigger;

struct trigger_ctx {
	bool		enumerating;
	bool		enumeration_no;
	riscv_trigger	triggers[256];
	uint8_t		trigger_cnt;
	uint8_t		mode;
	uint8_t		used_cnt;
};

int z_gdb_entry(struct arch_esf *esf, unsigned int id);

#endif

#endif
